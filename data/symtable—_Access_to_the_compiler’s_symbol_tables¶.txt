Title: symtable— Access to the compiler’s symbol tables¶
URL: https://docs.python.org/3/library/symtable.html#symtable.symtable

symtable — Access to the compiler's symbol tables Generating Symbol Tables Examining Symbol Tables Command-Line Usage

Generating Symbol Tables

Examining Symbol Tables

Command-Line Usage

ast — Abstract Syntax Trees

token — Constants used with Python parse trees

Report a Bug

Show Source

index

modules |

next |

previous |



Python »





3.13.2 Documentation »

The Python Standard Library »

Python Language Services »

symtable — Access to the compiler's symbol tables

|

Theme Auto Light Dark |

Source code: Lib/symtable.py

Symbol tables are generated by the compiler from AST just before bytecode is generated.  The symbol table is responsible for calculating the scope of every identifier in the code. symtable provides an interface to examine these tables.

Return the toplevel SymbolTable for the Python source code . filename is the name of the file containing the code. compile_type is like the mode argument to compile() .

An enumeration indicating the type of a SymbolTable object.

Used for the symbol table of a module.

Used for the symbol table of a function.

Used for the symbol table of a class.

The following members refer to different flavors of annotation scopes .

Used for annotations if from __future__ import annotations is active.

Used for the symbol table of type constructions.

Used for the symbol table of generic functions or generic classes .

Used for the symbol table of the bound, the constraint tuple or the default value of a single type variable in the formal sense, i.e., a TypeVar, a TypeVarTuple or a ParamSpec object (the latter two do not support a bound or a constraint tuple).

Added in version 3.13.

A namespace table for a block.  The constructor is not public.

Return the type of the symbol table.  Possible values are members of the SymbolTableType enumeration.

Changed in version 3.12: Added 'annotation' , 'TypeVar bound' , 'type alias' , and 'type parameter' as possible return values.

Changed in version 3.13: Return values are members of the SymbolTableType enumeration.

The exact values of the returned string may change in the future, and thus, it is recommended to use SymbolTableType members instead of hard-coded strings.

Return the table's identifier.

Return the table's name.  This is the name of the class if the table is for a class, the name of the function if the table is for a function, or 'top' if the table is global ( get_type() returns 'module' ). For type parameter scopes (which are used for generic classes, functions, and type aliases), it is the name of the underlying class, function, or type alias. For type alias scopes, it is the name of the type alias. For TypeVar bound scopes, it is the name of the TypeVar .

Return the number of the first line in the block this table represents.

Return True if the locals in this table can be optimized.

Return True if the block is a nested class or function.

Return True if the block has nested namespaces within it.  These can be obtained with get_children() .

Return a view object containing the names of symbols in the table. See the documentation of view objects .

Lookup name in the table and return a Symbol instance.

Return a list of Symbol instances for names in the table.

Return a list of the nested symbol tables.

A namespace for a function or method.  This class inherits from SymbolTable .

Return a tuple containing names of parameters to this function.

Return a tuple containing names of locals in this function.

Return a tuple containing names of globals in this function.

Return a tuple containing names of explicitly declared nonlocals in this function.

Return a tuple containing names of free (closure) variables in this function.

A namespace of a class.  This class inherits from SymbolTable .

Return a tuple containing the names of method-like functions declared in the class.

Here, the term 'method' designates any function defined in the class body via def or async def .

Functions defined in a deeper scope (e.g., in an inner class) are not picked up by get_methods() .

For example:

>>> import symtable >>> st = symtable . symtable ( ''' ... def outer(): pass ... ... class A: ... def f(): ... def w(): pass ... ... def g(self): pass ... ... @classmethod ... async def h(cls): pass ... ... global outer ... def outer(self): pass ... ''' , 'test' , 'exec' ) >>> class_A = st . get_children ()[ 1 ] >>> class_A . get_methods () ('f', 'g', 'h')

Although A().f() raises TypeError at runtime, A.f is still considered as a method-like function.

An entry in a SymbolTable corresponding to an identifier in the source.  The constructor is not public.

Return the symbol's name.

Return True if the symbol is used in its block.

Return True if the symbol is created from an import statement.

Return True if the symbol is a parameter.

Return True if the symbol is global.

Return True if the symbol is nonlocal.

Return True if the symbol is declared global with a global statement.

Return True if the symbol is local to its block.

Return True if the symbol is annotated.

Added in version 3.6.

Return True if the symbol is referenced in its block, but not assigned to.

Return True if the symbol is assigned to in its block.

Return True if name binding introduces new namespace.

If the name is used as the target of a function or class statement, this will be true.

For example:

>>> table = symtable . symtable ( "def some_func(): pass" , "string" , "exec" ) >>> table . lookup ( "some_func" ) . is_namespace () True

Note that a single name can be bound to multiple objects.  If the result is True , the name may also be bound to other objects, like an int or list, that does not introduce a new namespace.

Return a list of namespaces bound to this name.

Return the namespace bound to this name. If more than one or no namespace is bound to this name, a ValueError is raised.

Added in version 3.13.

The symtable module can be executed as a script from the command line.

python -m symtable [ infile... ]

Symbol tables are generated for the specified Python source files and dumped to stdout. If no input file is specified, the content is read from stdin.

symtable — Access to the compiler's symbol tables Generating Symbol Tables Examining Symbol Tables Command-Line Usage

Generating Symbol Tables

Examining Symbol Tables

Command-Line Usage

ast — Abstract Syntax Trees

token — Constants used with Python parse trees

Report a Bug

Show Source

index

modules |

next |

previous |



Python »





3.13.2 Documentation »

The Python Standard Library »

Python Language Services »

symtable — Access to the compiler's symbol tables

|

Theme Auto Light Dark |