Title: msvcrt— Useful routines from the MS VC++ runtime¶
URL: https://docs.python.org/3/library/msvcrt.html#msvcrt.CRTDBG_MODE_FILE

msvcrt — Useful routines from the MS VC++ runtime File Operations Console I/O Other Functions

File Operations

Console I/O

Other Functions

MS Windows Specific Services

winreg — Windows registry access

Report a Bug

Show Source

index

modules |

next |

previous |



Python »





3.13.2 Documentation »

The Python Standard Library »

MS Windows Specific Services »

msvcrt — Useful routines from the MS VC++ runtime

|

Theme Auto Light Dark |

These functions provide access to some useful capabilities on Windows platforms. Some higher-level modules use these functions to build the Windows implementations of their services. For example, the getpass module uses this in the implementation of the getpass() function.

Further documentation on these functions can be found in the Platform API documentation.

The module implements both the normal and wide char variants of the console I/O api. The normal API deals only with ASCII characters and is of limited use for internationalized applications. The wide char API should be used where ever possible.

Changed in version 3.3: Operations in this module now raise OSError where IOError was raised.

Lock part of a file based on file descriptor fd from the C runtime. Raises OSError on failure. The locked region of the file extends from the current file position for nbytes bytes, and may continue beyond the end of the file. mode must be one of the LK_* constants listed below. Multiple regions in a file may be locked at the same time, but may not overlap. Adjacent regions are not merged; they must be unlocked individually.

Raises an auditing event msvcrt.locking with arguments fd , mode , nbytes .

Locks the specified bytes. If the bytes cannot be locked, the program immediately tries again after 1 second. If, after 10 attempts, the bytes cannot be locked, OSError is raised.

Locks the specified bytes. If the bytes cannot be locked, OSError is raised.

Unlocks the specified bytes, which must have been previously locked.

Set the line-end translation mode for the file descriptor fd . To set it to text mode, flags should be os.O_TEXT ; for binary, it should be os.O_BINARY .

Create a C runtime file descriptor from the file handle handle . The flags parameter should be a bitwise OR of os.O_APPEND , os.O_RDONLY , os.O_TEXT and os.O_NOINHERIT . The returned file descriptor may be used as a parameter to os.fdopen() to create a file object.

The file descriptor is inheritable by default. Pass os.O_NOINHERIT flag to make it non inheritable.

Raises an auditing event msvcrt.open_osfhandle with arguments handle , flags .

Return the file handle for the file descriptor fd . Raises OSError if fd is not recognized.

Raises an auditing event msvcrt.get_osfhandle with argument fd .

Returns a nonzero value if a keypress is waiting to be read. Otherwise, return 0.

Read a keypress and return the resulting character as a byte string. Nothing is echoed to the console. This call will block if a keypress is not already available, but will not wait for Enter to be pressed. If the pressed key was a special function key, this will return '\000' or '\xe0' ; the next call will return the keycode. The Control - C keypress cannot be read with this function.

Wide char variant of getch() , returning a Unicode value.

Similar to getch() , but the keypress will be echoed if it represents a printable character.

Wide char variant of getche() , returning a Unicode value.

Print the byte string char to the console without buffering.

Wide char variant of putch() , accepting a Unicode value.

Cause the byte string char to be "pushed back" into the console buffer; it will be the next character read by getch() or getche() .

Wide char variant of ungetch() , accepting a Unicode value.

Force the malloc() heap to clean itself up and return unused blocks to the operating system. On failure, this raises OSError .

Changes the location where the C runtime writes an error message for an error that might end the program. mode must be one of the OUT_* constants listed below  or REPORT_ERRMODE . Returns the old setting or -1 if an error occurs. Only available in debug build of Python .

Error sink is determined by the app's type. Only available in debug build of Python .

Error sink is a standard error. Only available in debug build of Python .

Error sink is a message box. Only available in debug build of Python .

Report the current error mode value. Only available in debug build of Python .

Specifies the destination or destinations for a specific report type generated by _CrtDbgReport() in the MS VC++ runtime. type must be one of the CRT_* constants listed below. mode must be one of the CRTDBG_* constants listed below. Only available in debug build of Python .

After you use CrtSetReportMode() to specify CRTDBG_MODE_FILE , you can specify the file handle to receive the message text. type must be one of the CRT_* constants listed below. file should be the file handle your want specified. Only available in debug build of Python .

Warnings, messages, and information that doesn't need immediate attention.

Errors, unrecoverable problems, and issues that require immediate attention.

Assertion failures.

Writes the message to the debugger's output window.

Writes the message to a user-supplied file handle. CrtSetReportFile() should be called to define the specific file or stream to use as the destination.

Creates a message box to display the message along with the Abort , Retry , and Ignore buttons.

Returns current mode for the specified type .

The CRT Assembly version, from the crtassem.h header file.

The VC Assembly public key token, from the crtassem.h header file.

The Libraries Assembly name prefix, from the crtassem.h header file.

msvcrt — Useful routines from the MS VC++ runtime File Operations Console I/O Other Functions

File Operations

Console I/O

Other Functions

MS Windows Specific Services

winreg — Windows registry access

Report a Bug

Show Source

index

modules |

next |

previous |



Python »





3.13.2 Documentation »

The Python Standard Library »

MS Windows Specific Services »

msvcrt — Useful routines from the MS VC++ runtime

|

Theme Auto Light Dark |